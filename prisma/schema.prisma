generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



enum Role {
  ADMIN
  VENDOR
  PENGGUNA
}

enum JenisKelamin {
  LAKI_LAKI
  PEREMPUAN
  LAINNYA
}

enum StatusBooking {
  DIPROSES
  DITUNDA
  DIBAYAR
  DITOLAK
  DIBATALKAN
  SELESAI
}

enum TipeFavorit {
  DESTINASI
  JEEP
  RESTORAN
  VILLA
}

enum TipeUlasan {
  DESTINASI
  JEEP
  RESTORAN
  VILLA
}

model User {
  id            String       @id @default(cuid())
  nama          String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  alamat        String?
  nomorHp       String?      @map("nomor_hp")
  role          Role         @default(PENGGUNA)
  jenisKelamin  JenisKelamin @default(LAINNYA) @map("jenis_kelamin")
  tanggalLahir  DateTime?    @map("tanggal_lahir")
  resetToken    String?      @map("reset_token") @db.Text
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  destinasi Destinasi[] @relation("DestinasiVendor")
  jeepTours JeepTour[]  @relation("JeepVendor")
  villas    Villa[]     @relation("VillaVendor")
  restorans Restoran[]  @relation("RestoranVendor")

  bookings  Booking[]
  favorites Favorite[]
  reviews   Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Destinasi {
  id        String     @id @default(cuid())
  nama      String
  deskripsi String
  lokasi    String
  gambarUrl String
  harga     Int
  vendorId  String
  vendor    User       @relation("DestinasiVendor", fields: [vendorId], references: [id])
  bookings  Booking[]  @relation("DestinasiBooking")
  favorites Favorite[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JeepTour {
  id        String     @id @default(cuid())
  nama      String
  deskripsi String
  lokasi    String
  harga     Int
  vendorId  String
  vendor    User       @relation("JeepVendor", fields: [vendorId], references: [id])
  bookings  Booking[]  @relation("JeepBooking")
  favorites Favorite[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Villa {
  id        String     @id @default(cuid())
  nama      String
  deskripsi String
  lokasi    String
  gambarUrl String
  harga     Int
  vendorId  String
  vendor    User       @relation("VillaVendor", fields: [vendorId], references: [id])
  bookings  Booking[]  @relation("VillaBooking")
  favorites Favorite[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restoran {
  id        String     @id @default(cuid())
  nama      String
  deskripsi String
  lokasi    String
  gambarUrl String
  vendorId  String
  vendor    User       @relation("RestoranVendor", fields: [vendorId], references: [id])
  bookings  Booking[]  @relation("RestoranBooking")
  favorites Favorite[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  status     StatusBooking @default(DIPROSES)
  totalHarga Int
  catatan    String?
  tanggal    DateTime      @default(now())

  destinasiId String?
  destinasi   Destinasi? @relation("DestinasiBooking", fields: [destinasiId], references: [id])

  jeepTourId String?
  jeepTour   JeepTour? @relation("JeepBooking", fields: [jeepTourId], references: [id])

  villaId String?
  villa   Villa?  @relation("VillaBooking", fields: [villaId], references: [id])

  restoranId String?
  restoran   Restoran? @relation("RestoranBooking", fields: [restoranId], references: [id])
}

model Favorite {
  id     String      @id @default(cuid())
  userId String
  tipe   TipeFavorit

  destinasiId String?
  destinasi   Destinasi? @relation(fields: [destinasiId], references: [id])

  jeepTourId String?
  jeepTour   JeepTour? @relation(fields: [jeepTourId], references: [id])

  villaId String?
  villa   Villa?  @relation(fields: [villaId], references: [id])

  restoranId String?
  restoran   Restoran? @relation(fields: [restoranId], references: [id])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, tipe])
}

model Review {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tipe     TipeUlasan
  nilai    Int
  komentar String?

  destinasiId String?
  destinasi   Destinasi? @relation(fields: [destinasiId], references: [id])

  jeepTourId String?
  jeepTour   JeepTour? @relation(fields: [jeepTourId], references: [id])

  villaId String?
  villa   Villa?  @relation(fields: [villaId], references: [id])

  restoranId String?
  restoran   Restoran? @relation(fields: [restoranId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, tipe])
}
